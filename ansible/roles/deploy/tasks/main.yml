---
- name: Install packages
  apt:
    name: "{{ packages }}"
    state: latest
    update_cache: yes
  tags:
    - packages

- name: Ensure a home for the site
  file:
    path: "{{ install_dir }}"
    state: directory
    owner: www-data
    group: www-data
  tags:
    - npm

- name: Clone or update the repo
  git:
    repo: https://github.com/ceph/ceph.io
    dest: "{{ install_dir }}"
    force: yes
    update: yes
  tags:
    - npm

- name: Check out desired branch
  command:
    cmd: "git checkout {{ branch }}"
    chdir: "{{ install_dir }}"
  tags:
    - npm

# I couldn't get the npm module working here
#- name: Install npm dependencies
#  npm:
#    path: "{{ install_dir }}"
#    state: latest

- name: Install npm dependencies
  command:
    cmd: npm install
    chdir: "{{ install_dir }}"
  tags:
    - npm

- name: Compile site
  command:
    cmd: npm run build
    chdir: "{{ install_dir }}"
  tags:
    - npm

- name: Update file permissions
  file:
    path: "{{ install_dir }}/dist"
    owner: www-data
    group: www-data
    recurse: yes
  tags:
    - npm

# TODO: Nginx global config if needed

- name: Ensure nginx default config is absent
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  tags:
    - nginx

- name: Put nginx site config in place
  template:
    src: site.j2
    dest: /etc/nginx/sites-available/site.conf
  notify: Restart nginx
  tags:
    - nginx

- name: Ensure symlink to nginx site config
  file:
    src: /etc/nginx/sites-available/site.conf
    dest: /etc/nginx/sites-enabled/site.conf
    state: link
  notify: Restart nginx
  tags:
    - nginx

# At the time of role creation, I had to do this first: https://community.letsencrypt.org/t/ubuntu-20-04-any-tips-attributeerror-module-acme-challenges-has-no-attribute-tlssni01/115831/12
- name: Get letsencrypt certs
  command: certbot --nginx --agree-tos {% for domain in letsencrypt_domains %}-d {{ domain }} {% endfor %} -m {{ letsencrypt_email }} --redirect --reinstall
  notify: Reload nginx
  tags:
    - letsencrypt

- name: Put nginx security directives in place
  blockinfile:
    path: /etc/nginx/sites-available/site.conf
    insertafter: ssl_dhparam*
    block: |
            add_header Strict-Transport-Security "max-age=31536000";
            server_tokens off;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; script-src 'self'";
            proxy_cookie_path / "/; HTTPOnly; Secure";
  tags:
    - nginx

- name: Validate nginx site config
  command: nginx -t
  tags:
    - nginx

- name: Create cronjob to automatically update site
  cron:
    name: "Update static site"
    minute: "*/{{ update_frequency }}"
    job: "cd {{ install_dir }} && git pull && npm install && npm run build && chown -R www-data:www-data {{ install_dir }}"
